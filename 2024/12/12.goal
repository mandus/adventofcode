#!/usr/bin/env goal
fn:"input.txt"
(2=#ARGS) and fn:ARGS@1
v:""\"."/(w:1+&*v)v:=-read fn

n:(-w;-1;1;w) / neighbours
vst:(#v)#0 / visited
gr:(,".")!(,0)
nxt:{[x;l] N:((-1+#v)<)^((0>)^(x+´n));N@&l=v N} / note: filter out of bounds (negative/>=#v)
addgrp:{[g;l;x] vst[x]and:0;vst[x]:1;gr[g],:x;:o[g;l]'nxt[x;l]}
over:{vst[x]and:0;vst[x]:1;l:v x;(l~".")and:0;gr[x]:,x; addgrp[x;l]'nxt[x;l]}

over'!#v
gr:-1_^gr / get rid of the dummy "." group
r:#'.gr
p:{+/({4-+/(y+´n)¿x} x)'x}'.gr
say "p1",+/r*p

o2t:{(w!x;(-w)!x)}

/ boundary points up ; left; right ; down:
bd:(0 1 2 3)!(((0 0);(1 0));((0 0);(0 1));((1 0);(1 1));((0 1);(1 1)))

mrg:{ /merge connecting boundaries; x is the current boundary; y is the new to merge/add
 t:({(s;e):y;(S;E):x; ?[e~S;(S;E);y]} y)'x; 
 e:1_y; 
 ?[(&e¿(*'|'t));t;(t,(,y))]}

p:{[g] / iterate over the group of nodes (index in 1d)
 g:^g
 m::g!({b:n+´y;i:!4; .x^(b i)!i} g)'g / map each node to b, the boundary of the node not in the group
 b::(!4)!(4#,())
 {(x;e): x; 
  ({[n;e] k:(o2t n)+´bd e; 
    b[e]:?[b e;mrg[b e;k];,k]} x)'e; b}'+(!m;.m)
 +/#'.b
}'.gr
say "p2", +/r*p
